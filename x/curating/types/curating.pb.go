// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stakebird/curating/v1beta1/curating.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Post struct {
	VendorID        uint32                                        `protobuf:"varint,1,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id" yaml:"vendor_id"`
	PostIDHash      []byte                                        `protobuf:"bytes,2,opt,name=post_id_hash,json=postIdHash,proto3" json:"post_id_hash" yaml:"post_id_hash"`
	Creator         github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=creator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"creator,omitempty" yaml:"creator"`
	RewardAccount   github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,4,opt,name=reward_account,json=rewardAccount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"reward_account,omitempty" yaml:"reward_account"`
	BodyHash        []byte                                        `protobuf:"bytes,5,opt,name=body_hash,json=bodyHash,proto3" json:"body_hash,omitempty" yaml:"body_hash"`
	CuratingEndTime time.Time                                     `protobuf:"bytes,7,opt,name=curating_end_time,json=curatingEndTime,proto3,stdtime" json:"curating_end_time" yaml:"curating_end_time"`
}

func (m *Post) Reset()         { *m = Post{} }
func (m *Post) String() string { return proto.CompactTextString(m) }
func (*Post) ProtoMessage()    {}
func (*Post) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b9830762980cde9, []int{0}
}
func (m *Post) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Post) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Post.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Post) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Post.Merge(m, src)
}
func (m *Post) XXX_Size() int {
	return m.Size()
}
func (m *Post) XXX_DiscardUnknown() {
	xxx_messageInfo_Post.DiscardUnknown(m)
}

var xxx_messageInfo_Post proto.InternalMessageInfo

func (m *Post) GetVendorID() uint32 {
	if m != nil {
		return m.VendorID
	}
	return 0
}

func (m *Post) GetPostIDHash() []byte {
	if m != nil {
		return m.PostIDHash
	}
	return nil
}

func (m *Post) GetCreator() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *Post) GetRewardAccount() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.RewardAccount
	}
	return nil
}

func (m *Post) GetBodyHash() []byte {
	if m != nil {
		return m.BodyHash
	}
	return nil
}

func (m *Post) GetCuratingEndTime() time.Time {
	if m != nil {
		return m.CuratingEndTime
	}
	return time.Time{}
}

type Upvote struct {
	Curator       github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=curator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"curator,omitempty" yaml:"curator"`
	RewardAccount github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=reward_account,json=rewardAccount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"reward_account,omitempty" yaml:"reward_account"`
	VoteAmount    types.Coin                                    `protobuf:"bytes,3,opt,name=vote_amount,json=voteAmount,proto3" json:"vote_amount"`
	CuratedTime   time.Time                                     `protobuf:"bytes,5,opt,name=curated_time,json=curatedTime,proto3,stdtime" json:"curated_time" yaml:"curated_time"`
}

func (m *Upvote) Reset()         { *m = Upvote{} }
func (m *Upvote) String() string { return proto.CompactTextString(m) }
func (*Upvote) ProtoMessage()    {}
func (*Upvote) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b9830762980cde9, []int{1}
}
func (m *Upvote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Upvote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Upvote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Upvote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Upvote.Merge(m, src)
}
func (m *Upvote) XXX_Size() int {
	return m.Size()
}
func (m *Upvote) XXX_DiscardUnknown() {
	xxx_messageInfo_Upvote.DiscardUnknown(m)
}

var xxx_messageInfo_Upvote proto.InternalMessageInfo

func (m *Upvote) GetCurator() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Curator
	}
	return nil
}

func (m *Upvote) GetRewardAccount() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.RewardAccount
	}
	return nil
}

func (m *Upvote) GetVoteAmount() types.Coin {
	if m != nil {
		return m.VoteAmount
	}
	return types.Coin{}
}

func (m *Upvote) GetCuratedTime() time.Time {
	if m != nil {
		return m.CuratedTime
	}
	return time.Time{}
}

// VPPair is struct that just has a vendor_id, post_id pair with no other data.
// It is intended to be used as a marshalable pointer. For example, a VPPair can
// be used to construct the key to getting an Upvote from state.
type VPPair struct {
	VendorID   uint32 `protobuf:"varint,1,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id" yaml:"vendor_id"`
	PostIDHash []byte `protobuf:"bytes,2,opt,name=post_id_hash,json=postIdHash,proto3" json:"post_id_hash" yaml:"post_id_hash"`
}

func (m *VPPair) Reset()         { *m = VPPair{} }
func (m *VPPair) String() string { return proto.CompactTextString(m) }
func (*VPPair) ProtoMessage()    {}
func (*VPPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b9830762980cde9, []int{2}
}
func (m *VPPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VPPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VPPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VPPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VPPair.Merge(m, src)
}
func (m *VPPair) XXX_Size() int {
	return m.Size()
}
func (m *VPPair) XXX_DiscardUnknown() {
	xxx_messageInfo_VPPair.DiscardUnknown(m)
}

var xxx_messageInfo_VPPair proto.InternalMessageInfo

func (m *VPPair) GetVendorID() uint32 {
	if m != nil {
		return m.VendorID
	}
	return 0
}

func (m *VPPair) GetPostIDHash() []byte {
	if m != nil {
		return m.PostIDHash
	}
	return nil
}

// VPPairs defines an array of VPPair objects.
type VPPairs struct {
	Pairs []VPPair `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs"`
}

func (m *VPPairs) Reset()         { *m = VPPairs{} }
func (m *VPPairs) String() string { return proto.CompactTextString(m) }
func (*VPPairs) ProtoMessage()    {}
func (*VPPairs) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b9830762980cde9, []int{3}
}
func (m *VPPairs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VPPairs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VPPairs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VPPairs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VPPairs.Merge(m, src)
}
func (m *VPPairs) XXX_Size() int {
	return m.Size()
}
func (m *VPPairs) XXX_DiscardUnknown() {
	xxx_messageInfo_VPPairs.DiscardUnknown(m)
}

var xxx_messageInfo_VPPairs proto.InternalMessageInfo

func (m *VPPairs) GetPairs() []VPPair {
	if m != nil {
		return m.Pairs
	}
	return nil
}

type Params struct {
	CurationWindow             time.Duration                          `protobuf:"bytes,1,opt,name=curation_window,json=curationWindow,proto3,stdduration" json:"curation_window" yaml:"curation_window"`
	VoteAmount                 types.Coin                             `protobuf:"bytes,2,opt,name=vote_amount,json=voteAmount,proto3" json:"vote_amount" yaml:"vote_amount"`
	MaxNumVotes                uint32                                 `protobuf:"varint,3,opt,name=max_num_votes,json=maxNumVotes,proto3" json:"max_num_votes" yaml:"max_num_votes"`
	MaxVendors                 uint32                                 `protobuf:"varint,4,opt,name=max_vendors,json=maxVendors,proto3" json:"max_vendors" yaml:"max_vendors"`
	RewardPoolAllocation       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=reward_pool_allocation,json=rewardPoolAllocation,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"reward_pool_allocation" yaml:"reward_pool_allocation"`
	CreatorAllocation          github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=creator_allocation,json=creatorAllocation,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"creator_allocation,omitempty" yaml:"creator_allocation"`
	RewardPoolCurationMaxAlloc github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=reward_pool_curation_max_alloc,json=rewardPoolCurationMaxAlloc,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"reward_pool_curation_max_alloc,omitempty" yaml:"reward_pool_curation_max_alloc"`
	InitialRewardPool          types.Coin                             `protobuf:"bytes,8,opt,name=initial_reward_pool,json=initialRewardPool,proto3" json:"initial_reward_pool" yaml:"initial_reward_pool"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b9830762980cde9, []int{4}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetCurationWindow() time.Duration {
	if m != nil {
		return m.CurationWindow
	}
	return 0
}

func (m *Params) GetVoteAmount() types.Coin {
	if m != nil {
		return m.VoteAmount
	}
	return types.Coin{}
}

func (m *Params) GetMaxNumVotes() uint32 {
	if m != nil {
		return m.MaxNumVotes
	}
	return 0
}

func (m *Params) GetMaxVendors() uint32 {
	if m != nil {
		return m.MaxVendors
	}
	return 0
}

func (m *Params) GetInitialRewardPool() types.Coin {
	if m != nil {
		return m.InitialRewardPool
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*Post)(nil), "stakebird.curating.v1beta1.Post")
	proto.RegisterType((*Upvote)(nil), "stakebird.curating.v1beta1.Upvote")
	proto.RegisterType((*VPPair)(nil), "stakebird.curating.v1beta1.VPPair")
	proto.RegisterType((*VPPairs)(nil), "stakebird.curating.v1beta1.VPPairs")
	proto.RegisterType((*Params)(nil), "stakebird.curating.v1beta1.Params")
}

func init() {
	proto.RegisterFile("stakebird/curating/v1beta1/curating.proto", fileDescriptor_9b9830762980cde9)
}

var fileDescriptor_9b9830762980cde9 = []byte{
	// 968 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xae, 0xbb, 0x6d, 0x9a, 0x4e, 0x9a, 0x42, 0xdd, 0xb2, 0xca, 0x46, 0x90, 0xa9, 0x46, 0x2c,
	0x4a, 0x25, 0xea, 0xa8, 0x0b, 0x1c, 0xe8, 0x01, 0x11, 0xb7, 0x20, 0xb2, 0xd2, 0x2e, 0x91, 0x05,
	0x5d, 0x09, 0x09, 0xac, 0x89, 0x3d, 0x9b, 0x5a, 0x8d, 0x3d, 0xc1, 0xe3, 0xb4, 0xe9, 0x19, 0xb8,
	0xef, 0xb1, 0xe2, 0x80, 0xfa, 0x5f, 0xf0, 0x2f, 0xf4, 0xb8, 0x47, 0xc4, 0x61, 0x40, 0xe9, 0x05,
	0x85, 0x9b, 0x8f, 0x88, 0x03, 0x9a, 0x1f, 0x49, 0xec, 0xb6, 0x50, 0x76, 0x25, 0x0e, 0x9c, 0x32,
	0xf3, 0xbd, 0xf7, 0xbe, 0xf7, 0xe6, 0x7b, 0x6f, 0x26, 0x06, 0x5b, 0x2c, 0xc1, 0x47, 0xa4, 0x13,
	0xc4, 0x7e, 0xc3, 0x1b, 0xc4, 0x38, 0x09, 0xa2, 0x6e, 0xe3, 0x78, 0xa7, 0x43, 0x12, 0xbc, 0x33,
	0x05, 0xac, 0x7e, 0x4c, 0x13, 0x6a, 0x56, 0xa7, 0xae, 0xd6, 0xd4, 0xa2, 0x5d, 0xab, 0x1b, 0x5d,
	0xda, 0xa5, 0xd2, 0xad, 0x21, 0x56, 0x2a, 0xa2, 0x5a, 0xf3, 0x28, 0x0b, 0x29, 0x6b, 0x74, 0x30,
	0x23, 0x33, 0x56, 0x1a, 0x44, 0xda, 0x0e, 0xbb, 0x94, 0x76, 0x7b, 0xa4, 0x21, 0x77, 0x9d, 0xc1,
	0xd3, 0x46, 0x12, 0x84, 0x84, 0x25, 0x38, 0xec, 0x4f, 0x08, 0xae, 0x3a, 0xf8, 0x32, 0x31, 0xd5,
	0x04, 0xe8, 0x87, 0x05, 0xb0, 0xd0, 0xa6, 0x2c, 0x31, 0x1f, 0x82, 0xe5, 0x63, 0x12, 0xf9, 0x34,
	0x76, 0x03, 0xbf, 0x62, 0x6c, 0x1a, 0xf5, 0xb2, 0xbd, 0x3d, 0xe2, 0xb0, 0x78, 0x20, 0xc1, 0xd6,
	0xfe, 0x98, 0xc3, 0x99, 0x43, 0xca, 0xe1, 0xab, 0xa7, 0x38, 0xec, 0xed, 0xa2, 0x29, 0x84, 0x9c,
	0xa2, 0x5a, 0xb7, 0x7c, 0xf3, 0x09, 0x58, 0xe9, 0x53, 0x96, 0xb8, 0x81, 0xef, 0x1e, 0x62, 0x76,
	0x58, 0x99, 0xdf, 0x34, 0xea, 0x2b, 0xf6, 0x7b, 0x23, 0x0e, 0x81, 0xc8, 0xd5, 0xda, 0xff, 0x04,
	0xb3, 0xc3, 0x31, 0x87, 0x39, 0xaf, 0x94, 0xc3, 0x75, 0xc5, 0x99, 0x45, 0x91, 0x03, 0xc4, 0xb6,
	0xe5, 0x8b, 0x10, 0xf3, 0x4b, 0xb0, 0xe4, 0xc5, 0x04, 0x27, 0x34, 0xae, 0xdc, 0x91, 0x9c, 0x7b,
	0x29, 0x87, 0xab, 0x2a, 0x4a, 0x1b, 0xd0, 0x1f, 0x1c, 0x6e, 0x77, 0x83, 0xe4, 0x70, 0xd0, 0xb1,
	0x3c, 0x1a, 0x36, 0xb4, 0x80, 0xea, 0x67, 0x9b, 0xf9, 0x47, 0x8d, 0xe4, 0xb4, 0x4f, 0x98, 0xd5,
	0xf4, 0xbc, 0xa6, 0xef, 0xc7, 0x84, 0x31, 0x67, 0xc2, 0x69, 0x7e, 0x0d, 0x56, 0x63, 0x72, 0x82,
	0x63, 0xdf, 0xc5, 0x9e, 0x47, 0x07, 0x51, 0x52, 0x59, 0x90, 0x59, 0x1e, 0xa6, 0x1c, 0xbe, 0xa6,
	0xb2, 0xe4, 0xed, 0x2f, 0x91, 0xac, 0xac, 0x18, 0x9a, 0x8a, 0xc0, 0xdc, 0x01, 0xcb, 0x1d, 0xea,
	0x9f, 0x2a, 0x9d, 0x16, 0x65, 0xb6, 0x8d, 0x99, 0xba, 0x53, 0x13, 0x72, 0x8a, 0x62, 0x2d, 0x45,
	0xe8, 0x81, 0xb5, 0xc9, 0xf4, 0xb8, 0x24, 0xf2, 0x5d, 0xd1, 0xf2, 0xca, 0xd2, 0xa6, 0x51, 0x2f,
	0x3d, 0xa8, 0x5a, 0xaa, 0xdd, 0xd6, 0xa4, 0xdd, 0xd6, 0x67, 0x93, 0x79, 0xb0, 0xdf, 0xbc, 0xe0,
	0x70, 0x2e, 0xe5, 0xb0, 0xa2, 0xe5, 0xba, 0x4a, 0x81, 0x9e, 0xfd, 0x02, 0x0d, 0xe7, 0x95, 0x09,
	0xfe, 0x51, 0xe4, 0x8b, 0x58, 0xf4, 0xe7, 0x3c, 0x28, 0x7c, 0xde, 0x3f, 0xa6, 0x09, 0x91, 0xea,
	0x0b, 0x2b, 0x8d, 0xe5, 0x80, 0xe4, 0xd5, 0x57, 0x86, 0x97, 0x52, 0x5f, 0x85, 0xde, 0xa0, 0xfe,
	0xfc, 0x7f, 0xad, 0xfe, 0x87, 0xa0, 0x24, 0x4e, 0xe6, 0xe2, 0x50, 0xe6, 0xbb, 0x23, 0x45, 0xbc,
	0x67, 0x29, 0x06, 0x4b, 0x5c, 0xba, 0xc9, 0xfd, 0xb4, 0xf6, 0x68, 0x10, 0xd9, 0x0b, 0x42, 0x43,
	0x07, 0x88, 0x98, 0xa6, 0x0c, 0x31, 0xbf, 0x02, 0x2b, 0xb2, 0x7e, 0xa2, 0xfb, 0xb0, 0x78, 0x6b,
	0x1f, 0xa0, 0xee, 0xc3, 0x7a, 0x46, 0x38, 0x92, 0x6d, 0x41, 0x49, 0x43, 0x52, 0xfe, 0x1f, 0x0d,
	0x50, 0x38, 0x68, 0xb7, 0x71, 0x10, 0xff, 0x2f, 0x6e, 0xe8, 0x6e, 0xf1, 0xec, 0x1c, 0x1a, 0xbf,
	0x9d, 0x43, 0x03, 0xb5, 0xc0, 0x92, 0x2a, 0x9c, 0x99, 0x1f, 0x80, 0xc5, 0xbe, 0x58, 0x54, 0x8c,
	0xcd, 0x3b, 0xf5, 0xd2, 0x03, 0x64, 0xfd, 0xfd, 0x3b, 0x68, 0xa9, 0x18, 0xad, 0xb4, 0x0a, 0x43,
	0xbf, 0x2f, 0x81, 0x42, 0x1b, 0xc7, 0x38, 0x64, 0xe6, 0x53, 0xa0, 0x27, 0x94, 0x46, 0xee, 0x49,
	0x10, 0xf9, 0xf4, 0x44, 0x4a, 0x21, 0xba, 0x76, 0x55, 0xf2, 0x7d, 0xed, 0x67, 0x23, 0xad, 0xf8,
	0xdd, 0xec, 0xe4, 0x4f, 0xe3, 0xd1, 0x99, 0x10, 0x7d, 0x75, 0x82, 0x3e, 0x91, 0xa0, 0x49, 0xf2,
	0x93, 0x31, 0x7f, 0xdb, 0x64, 0x6c, 0x89, 0x1c, 0x63, 0x0e, 0xb3, 0x51, 0x29, 0x87, 0xa6, 0xee,
	0xc1, 0x0c, 0x44, 0xb9, 0xf1, 0x79, 0x04, 0xca, 0x21, 0x1e, 0xba, 0xd1, 0x20, 0x74, 0x05, 0xca,
	0xe4, 0x08, 0x96, 0xed, 0xad, 0x31, 0x87, 0x79, 0x43, 0xca, 0xe1, 0x86, 0xe2, 0xca, 0xc1, 0xc8,
	0x29, 0x85, 0x78, 0xf8, 0x78, 0x10, 0x1e, 0x88, 0x9d, 0xf9, 0x31, 0x10, 0x5b, 0x57, 0xb5, 0x99,
	0xc9, 0xd7, 0xab, 0x6c, 0xdf, 0x17, 0x65, 0x65, 0xe0, 0x59, 0x59, 0x19, 0x10, 0x39, 0x20, 0xc4,
	0x43, 0x35, 0x4a, 0xcc, 0xfc, 0xce, 0x00, 0x77, 0xf5, 0x5d, 0xeb, 0x53, 0xda, 0x73, 0x71, 0xaf,
	0x47, 0x3d, 0x29, 0x8f, 0x1c, 0xf0, 0x65, 0xfb, 0x53, 0x71, 0xdc, 0x9f, 0x39, 0x7c, 0xeb, 0x5f,
	0x5c, 0xbf, 0x7d, 0xe2, 0xa5, 0x1c, 0xbe, 0x91, 0xbb, 0xc1, 0x57, 0x58, 0x91, 0xb3, 0xa1, 0x0c,
	0x6d, 0x4a, 0x7b, 0xcd, 0x29, 0x6c, 0x7e, 0x6f, 0x00, 0x53, 0x3f, 0xce, 0xd9, 0x1a, 0x0a, 0xb2,
	0x86, 0xa3, 0x17, 0xab, 0x61, 0xcc, 0xe1, 0xeb, 0xd7, 0xb9, 0xde, 0xa6, 0x61, 0x90, 0x90, 0xb0,
	0x9f, 0x9c, 0xa6, 0x1c, 0xde, 0xcb, 0xfd, 0x93, 0xe4, 0xea, 0x5b, 0xd3, 0x60, 0xa6, 0xb8, 0x0b,
	0x03, 0xd4, 0xb2, 0xc7, 0x99, 0xce, 0x95, 0x90, 0x55, 0xc6, 0xca, 0x57, 0x79, 0xd9, 0xfe, 0xc6,
	0x78, 0xe1, 0x4a, 0xeb, 0xff, 0x4c, 0x9c, 0xab, 0xfa, 0xfe, 0x75, 0x65, 0xaf, 0x47, 0x20, 0xa7,
	0x3a, 0x53, 0x78, 0x4f, 0x9b, 0x1f, 0xe1, 0xa1, 0x3c, 0x8f, 0xf9, 0xad, 0x01, 0xd6, 0x83, 0x28,
	0x48, 0x02, 0xdc, 0x73, 0x33, 0x3c, 0x95, 0xe2, 0x6d, 0x63, 0xff, 0xbe, 0x1e, 0xfb, 0x9b, 0xa2,
	0x53, 0x0e, 0xab, 0xaa, 0xb4, 0x1b, 0x8c, 0xc8, 0x59, 0xd3, 0xa8, 0x33, 0x2d, 0x6b, 0x77, 0xe1,
	0xec, 0x1c, 0xce, 0xd9, 0x8f, 0x2f, 0x46, 0x35, 0xe3, 0xf9, 0xa8, 0x66, 0xfc, 0x3a, 0xaa, 0x19,
	0xcf, 0x2e, 0x6b, 0x73, 0xcf, 0x2f, 0x6b, 0x73, 0x3f, 0x5d, 0xd6, 0xe6, 0xbe, 0x78, 0x37, 0xa3,
	0x5f, 0x7f, 0xd0, 0xe9, 0x05, 0xde, 0x36, 0x3e, 0x21, 0x8c, 0x86, 0xa4, 0x31, 0xfb, 0x08, 0x1b,
	0xce, 0x3e, 0xc3, 0xa4, 0xa2, 0x9d, 0x82, 0x7c, 0x11, 0xde, 0xf9, 0x2b, 0x00, 0x00, 0xff, 0xff,
	0x5b, 0x58, 0x86, 0x5a, 0xa9, 0x09, 0x00, 0x00,
}

func (this *VPPair) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VPPair)
	if !ok {
		that2, ok := that.(VPPair)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VendorID != that1.VendorID {
		return false
	}
	if !bytes.Equal(this.PostIDHash, that1.PostIDHash) {
		return false
	}
	return true
}
func (m *Post) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Post) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Post) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CuratingEndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CuratingEndTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintCurating(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x3a
	if len(m.BodyHash) > 0 {
		i -= len(m.BodyHash)
		copy(dAtA[i:], m.BodyHash)
		i = encodeVarintCurating(dAtA, i, uint64(len(m.BodyHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RewardAccount) > 0 {
		i -= len(m.RewardAccount)
		copy(dAtA[i:], m.RewardAccount)
		i = encodeVarintCurating(dAtA, i, uint64(len(m.RewardAccount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintCurating(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PostIDHash) > 0 {
		i -= len(m.PostIDHash)
		copy(dAtA[i:], m.PostIDHash)
		i = encodeVarintCurating(dAtA, i, uint64(len(m.PostIDHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.VendorID != 0 {
		i = encodeVarintCurating(dAtA, i, uint64(m.VendorID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Upvote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Upvote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Upvote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CuratedTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CuratedTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintCurating(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.VoteAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCurating(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.RewardAccount) > 0 {
		i -= len(m.RewardAccount)
		copy(dAtA[i:], m.RewardAccount)
		i = encodeVarintCurating(dAtA, i, uint64(len(m.RewardAccount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Curator) > 0 {
		i -= len(m.Curator)
		copy(dAtA[i:], m.Curator)
		i = encodeVarintCurating(dAtA, i, uint64(len(m.Curator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VPPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VPPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PostIDHash) > 0 {
		i -= len(m.PostIDHash)
		copy(dAtA[i:], m.PostIDHash)
		i = encodeVarintCurating(dAtA, i, uint64(len(m.PostIDHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.VendorID != 0 {
		i = encodeVarintCurating(dAtA, i, uint64(m.VendorID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VPPairs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPPairs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VPPairs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pairs) > 0 {
		for iNdEx := len(m.Pairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCurating(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.InitialRewardPool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCurating(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.RewardPoolCurationMaxAlloc.Size()
		i -= size
		if _, err := m.RewardPoolCurationMaxAlloc.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCurating(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.CreatorAllocation.Size()
		i -= size
		if _, err := m.CreatorAllocation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCurating(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.RewardPoolAllocation.Size()
		i -= size
		if _, err := m.RewardPoolAllocation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCurating(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.MaxVendors != 0 {
		i = encodeVarintCurating(dAtA, i, uint64(m.MaxVendors))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxNumVotes != 0 {
		i = encodeVarintCurating(dAtA, i, uint64(m.MaxNumVotes))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.VoteAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCurating(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	n6, err6 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.CurationWindow, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.CurationWindow):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintCurating(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintCurating(dAtA []byte, offset int, v uint64) int {
	offset -= sovCurating(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Post) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VendorID != 0 {
		n += 1 + sovCurating(uint64(m.VendorID))
	}
	l = len(m.PostIDHash)
	if l > 0 {
		n += 1 + l + sovCurating(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovCurating(uint64(l))
	}
	l = len(m.RewardAccount)
	if l > 0 {
		n += 1 + l + sovCurating(uint64(l))
	}
	l = len(m.BodyHash)
	if l > 0 {
		n += 1 + l + sovCurating(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CuratingEndTime)
	n += 1 + l + sovCurating(uint64(l))
	return n
}

func (m *Upvote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Curator)
	if l > 0 {
		n += 1 + l + sovCurating(uint64(l))
	}
	l = len(m.RewardAccount)
	if l > 0 {
		n += 1 + l + sovCurating(uint64(l))
	}
	l = m.VoteAmount.Size()
	n += 1 + l + sovCurating(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CuratedTime)
	n += 1 + l + sovCurating(uint64(l))
	return n
}

func (m *VPPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VendorID != 0 {
		n += 1 + sovCurating(uint64(m.VendorID))
	}
	l = len(m.PostIDHash)
	if l > 0 {
		n += 1 + l + sovCurating(uint64(l))
	}
	return n
}

func (m *VPPairs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pairs) > 0 {
		for _, e := range m.Pairs {
			l = e.Size()
			n += 1 + l + sovCurating(uint64(l))
		}
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.CurationWindow)
	n += 1 + l + sovCurating(uint64(l))
	l = m.VoteAmount.Size()
	n += 1 + l + sovCurating(uint64(l))
	if m.MaxNumVotes != 0 {
		n += 1 + sovCurating(uint64(m.MaxNumVotes))
	}
	if m.MaxVendors != 0 {
		n += 1 + sovCurating(uint64(m.MaxVendors))
	}
	l = m.RewardPoolAllocation.Size()
	n += 1 + l + sovCurating(uint64(l))
	l = m.CreatorAllocation.Size()
	n += 1 + l + sovCurating(uint64(l))
	l = m.RewardPoolCurationMaxAlloc.Size()
	n += 1 + l + sovCurating(uint64(l))
	l = m.InitialRewardPool.Size()
	n += 1 + l + sovCurating(uint64(l))
	return n
}

func sovCurating(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCurating(x uint64) (n int) {
	return sovCurating(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Post) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCurating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Post: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Post: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorID", wireType)
			}
			m.VendorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VendorID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostIDHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCurating
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCurating
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostIDHash = append(m.PostIDHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PostIDHash == nil {
				m.PostIDHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCurating
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCurating
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = append(m.Creator[:0], dAtA[iNdEx:postIndex]...)
			if m.Creator == nil {
				m.Creator = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAccount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCurating
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCurating
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAccount = append(m.RewardAccount[:0], dAtA[iNdEx:postIndex]...)
			if m.RewardAccount == nil {
				m.RewardAccount = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodyHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCurating
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCurating
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BodyHash = append(m.BodyHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BodyHash == nil {
				m.BodyHash = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CuratingEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCurating
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCurating
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CuratingEndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCurating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCurating
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCurating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Upvote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCurating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Upvote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Upvote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCurating
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCurating
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Curator = append(m.Curator[:0], dAtA[iNdEx:postIndex]...)
			if m.Curator == nil {
				m.Curator = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAccount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCurating
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCurating
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAccount = append(m.RewardAccount[:0], dAtA[iNdEx:postIndex]...)
			if m.RewardAccount == nil {
				m.RewardAccount = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCurating
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCurating
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VoteAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CuratedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCurating
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCurating
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CuratedTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCurating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCurating
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCurating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCurating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorID", wireType)
			}
			m.VendorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VendorID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostIDHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCurating
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCurating
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostIDHash = append(m.PostIDHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PostIDHash == nil {
				m.PostIDHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCurating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCurating
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCurating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPPairs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCurating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPPairs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPPairs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCurating
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCurating
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pairs = append(m.Pairs, VPPair{})
			if err := m.Pairs[len(m.Pairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCurating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCurating
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCurating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCurating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurationWindow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCurating
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCurating
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.CurationWindow, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCurating
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCurating
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VoteAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNumVotes", wireType)
			}
			m.MaxNumVotes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxNumVotes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxVendors", wireType)
			}
			m.MaxVendors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxVendors |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPoolAllocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCurating
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCurating
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardPoolAllocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorAllocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCurating
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCurating
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CreatorAllocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPoolCurationMaxAlloc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCurating
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCurating
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardPoolCurationMaxAlloc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialRewardPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCurating
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCurating
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialRewardPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCurating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCurating
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCurating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCurating(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCurating
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCurating
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCurating
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCurating
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCurating
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCurating
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCurating        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCurating          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCurating = fmt.Errorf("proto: unexpected end of group")
)
